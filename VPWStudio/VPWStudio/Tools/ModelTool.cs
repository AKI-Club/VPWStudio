using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace VPWStudio
{
	public partial class ModelTool: Form
	{
		public AkiModel CurModel = null;
		public string CurFileName;

		public ModelTool()
		{
			InitializeComponent();
		}

		private void buttonOpen_Click(object sender, EventArgs e)
		{
			OpenFileDialog ofd = new OpenFileDialog();
			ofd.Title = "Open AKI Model Data";
			if (ofd.ShowDialog() == DialogResult.OK)
			{
				this.CurFileName = ofd.FileName;
				tbCurFile.Text = this.CurFileName;

				FileStream fs = new FileStream(ofd.FileName, FileMode.Open);
				BinaryReader br = new BinaryReader(fs);
				this.CurModel = new AkiModel(br);
				fs.Close();

				lblValueScale.Text = CurModel.Scale.ToString();
				lblValueOffsetX.Text = CurModel.OffsetX.ToString();
				lblValueOffsetY.Text = CurModel.OffsetY.ToString();
				lblValueOffsetZ.Text = CurModel.OffsetZ.ToString();
				lblValueTexOffset.Text = String.Format("0x{0:X}, 0x{1:X}", (CurModel.TextureSize & 0xF0) >> 4, CurModel.TextureSize & 0x0F);

				tbInfoDump.Clear();

				tbInfoDump.Text += String.Format("Information for {0}:\r\n", ofd.FileName);
				tbInfoDump.Text += String.Format("Scale: {0}\r\n", this.CurModel.Scale);
				tbInfoDump.Text += String.Format("Model Type: {0}\r\n", this.CurModel.ModelType == 0x80 ? "Costume Part?" : "Normal");
				tbInfoDump.Text += String.Format("Num Verts: {0}\r\n", this.CurModel.Vertices.Count);
				tbInfoDump.Text += String.Format("Num Faces: {0}\r\n", this.CurModel.Faces.Count);
				tbInfoDump.Text += String.Format("Unknown: 0x{0:X2}\r\n", this.CurModel.VertexInfluence);
				tbInfoDump.Text += String.Format("X Offset: {0}\r\n", this.CurModel.OffsetX);
				tbInfoDump.Text += String.Format("Y Offset: {0}\r\n", this.CurModel.OffsetY);
				tbInfoDump.Text += String.Format("Z Offset: {0}\r\n", this.CurModel.OffsetZ);
				tbInfoDump.Text += String.Format("Texture Offset: {0}\r\n", this.CurModel.TextureSize);
				tbInfoDump.Text += "\r\n";
				// print verts
				for (int v = 0; v < this.CurModel.Vertices.Count; v++)
				{
					AkiVertex temp = this.CurModel.Vertices[v];

					tbInfoDump.Text += String.Format(
						"Vertex {0}: xyz {{{1},{2},{3}}} uv{{{4},{5}}} color:{{{6},{7},{8}}}\r\n",
						v,
						temp.X, temp.Y, temp.Z, temp.U, temp.V,
						temp.VertexColor.R, temp.VertexColor.G, temp.VertexColor.B
					);
				}
				tbInfoDump.Text += "\r\n";
				// print faces
				if (this.CurModel.Faces.Count > 0)
				{
					for (int f = 0; f < this.CurModel.Faces.Count; f++)
					{
						AkiFace temp = this.CurModel.Faces[f];
						tbInfoDump.Text += String.Format(
							"Face {0}: {{{1},{2},{3}}} \r\n", f, temp.Vertex1, temp.Vertex2, temp.Vertex3
						);
					}
				}

				dgvVertices.Rows.Clear();
				dgvVertices.Rows.Add(this.CurModel.Vertices.Count);
				for (int v = 0; v < this.CurModel.Vertices.Count; v++)
				{
					dgvVertices.Rows[v].Cells[0].Value = v;
					dgvVertices.Rows[v].Cells[1].Value = this.CurModel.Vertices[v].X;
					dgvVertices.Rows[v].Cells[2].Value = this.CurModel.Vertices[v].Y;
					dgvVertices.Rows[v].Cells[3].Value = this.CurModel.Vertices[v].Z;
					dgvVertices.Rows[v].Cells[4].Value = this.CurModel.Vertices[v].U;
					dgvVertices.Rows[v].Cells[5].Value = this.CurModel.Vertices[v].V;
				}

				dgvFaces.Rows.Clear();
				if (this.CurModel.Faces.Count > 0)
				{
					dgvFaces.Rows.Add(this.CurModel.Faces.Count);
					for (int f = 0; f < this.CurModel.Faces.Count; f++)
					{
						dgvFaces.Rows[f].Cells[0].Value = f;
						dgvFaces.Rows[f].Cells[1].Value = this.CurModel.Faces[f].Vertex1;
						dgvFaces.Rows[f].Cells[2].Value = this.CurModel.Faces[f].Vertex2;
						dgvFaces.Rows[f].Cells[3].Value = this.CurModel.Faces[f].Vertex3;
					}
				}
			}
		}

		private void buttonExportOBJ_Click(object sender, EventArgs e)
		{
			SaveFileDialog sfd = new SaveFileDialog();
			sfd.Title = "Export Wavefront OBJ";
			sfd.Filter = "Wavefront OBJ (*.obj)|*.obj|All Files (*.*)|*.*";
			sfd.DefaultExt = "obj";
			if (sfd.ShowDialog() == DialogResult.OK){
				FileStream fs = new FileStream(sfd.FileName, FileMode.Create);
				StreamWriter sw = new StreamWriter(fs);
				sw.WriteLine("# Generated by VPW Studio");
				sw.WriteLine(String.Format("# Original Filename: {0}", this.CurFileName));
				this.CurModel.WriteWavefrontObj(sw);
				fs.Close();
			}
		}
	}
}
