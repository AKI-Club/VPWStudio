notes on Zoinkity's VPW2 offsetter
==================================

fileidx: "I'm stupid and lazy.  This is hardcoded."
the first entry is the ROM address of the first file.

--------------------------------------------------------------------------------
def offset(rom, index, data, force_raw=False, compress=-1):

"""This only changes offsets to files in the filetable!
Offsets the filetable values starting at index by difference.
Also alters the hardcoded pointers to the soundtable.

Set force_raw to True to retain the compression flag despite not doing compression.
This is used to insert 'raw', possibly pre-compressed files."""

# If compress = -1, this will select the smaller of the two filesizes.
# 1 and 0 force compressed or uncompressed, respectively.

    from array import array

    if isinstance(rom, bytes):
        rom = bytearray(rom)

	# (freem) get the filetable location from the code ("SetupFiletable").
    h = int.from_bytes(rom[0x48DA:0x48DC], byteorder='big') << 16
    l = int.from_bytes(rom[0x48DE:0x48E0], byteorder='big', signed=True)
    filetable = h + l

	# (freem) get filetable
    tbl = array("L", rom[filetable:filetable+0xCC8C])
    tbl.byteswap()

    s = tbl[index] & (~1)
    e = tbl[index+1] & (~1)

    # True if compressed, so compress file before insertion.
    if (tbl[index] & 1) and not force_raw:
        org = len(data).to_bytes(4, 'big')
        data = b''.join((org, LZSS.encode(data, fill=0)))

    # Force output data HW aligned.
    if len(data)&1:
        data = b''.join((data, b'\x00'))

    difference = len(data) - (e - s)

    for i in range(index+1, len(tbl)):
        tbl[i] += difference

    tbl.byteswap()
    rom[filetable:filetable+0xCC8C] = tbl.tobytes()

    # Slide in the file after updating the offsets.
    rom[0x152DF0+s:0x152DF0+e] = data

    def addr2hws(a1, a2):
        h = int.from_bytes(rom[a1:a1+2], byteorder='big') << 16
        v = h + int.from_bytes(rom[a2:a2+2], byteorder='big', signed=True)
        v += difference
        h = (v>>16)
        if v & 0x8000:
            h += 1
        l = v & 0xFFFF
        rom[a1:a1+2] = h.to_bytes(2, byteorder='big')
        rom[a2:a2+2] = l.to_bytes(2, byteorder='big')

    addr2hws(0x48DA, 0x48DE)
    # The audio file offsets.
##    difference += 15
##    a = difference & 15
##    difference &= (~15)
    addr2hws(0x432A, 0x432E)
    addr2hws(0x4336, 0x433A)
    addr2hws(0x4366, 0x436A)
    addr2hws(0x436E, 0x4372)
    addr2hws(0x439A, 0x439E)
    addr2hws(0x43A2, 0x43A6)
    addr2hws(0x43CE, 0x43D2)
    addr2hws(0x43D6, 0x43DA)
    addr2hws(0x4402, 0x4406)
    addr2hws(0x440A, 0x440E)
    addr2hws(0x447A, 0x447E)
    addr2hws(0x44DE, 0x44E6)
    addr2hws(0x4512, 0x451A)
    addr2hws(0x17312,0x17316)
    addr2hws(0x1731A,0x1731E)
    addr2hws(0x1732E,0x17332)
    addr2hws(0x17336,0x1733A)
    addr2hws(0x173AE,0x173B2)
    addr2hws(0x173B6,0x173BA)
    addr2hws(0x173CA,0x173CE)
    addr2hws(0x173D2,0x173D6)
    addr2hws(0x17466,0x1746E)
    addr2hws(0x174AE,0x174B6)
    addr2hws(0x17772,0x17776)
    addr2hws(0x1777A,0x1777E)
    addr2hws(0x177A6,0x177AA)
    addr2hws(0x177AE,0x177B2)
    addr2hws(0x177EE,0x177F6)
    addr2hws(0x179FA,0x179FE)
    addr2hws(0x17A02,0x17A06)
    addr2hws(0x17A22,0x17A26)
    addr2hws(0x17A2A,0x17A2E)
    addr2hws(0x17A46,0x17A4A)
    addr2hws(0x17A4E,0x17A52)
    addr2hws(0x17A6A,0x17A6E)
    addr2hws(0x17A72,0x17A76)
    addr2hws(0x17B7A,0x17B82)
    addr2hws(0x17B46,0x17B4E)

##    h = int.from_bytes(rom[0x4336:0x4338], byteorder='big') << 16
##    l = int.from_bytes(rom[0x433A:0x433C], byteorder='big', signed=True)
##    filetable = h + l
##    rom.insert(filetable-a, bytes(a))

    return rom

--------------------------------------------------------------------------------
def VPW2_EOF(rom, pad=False):
    """Last address revealed at (0x17B7A,0x17B82).
    Read the PtrTable before it at (0x17A6A,0x17A6E).
    0x20 is #entries, 0x30 starts entries. Each entry is 0xA0.
    At PtrTable + 0xA0(#entries-1) + 0x30 is final wave, so grab size from that.
    Entry+0 is offset, Entry+4 is size.  Pad to 0x16 for actual.
    """
    # Make sure it's mutable.
    if isinstance(rom, bytes):
        rom = bytearray(rom)

    # Find size of final wavebank, in case somebody editted it.
    h = int.from_bytes(rom[0x17A6A:0x17A6C], byteorder='big') << 16
    l = int.from_bytes(rom[0x17A6E:0x17A70], byteorder='big', signed=True)
    ptr = h + l

    # Get size and offset.
    ptr+= int.from_bytes(rom[ptr+0x2C:ptr+0x30], byteorder='big')
    p = int.from_bytes(rom[ptr-0xA0:ptr-0x9C], byteorder='big')
    p+= int.from_bytes(rom[ptr-0x9C:ptr-0x98], byteorder='big')

    # Find position of final wavebank.
    h = int.from_bytes(rom[0x17B7A:0x17B7C], byteorder='big') << 16
    l = int.from_bytes(rom[0x17B82:0x17B84], byteorder='big', signed=True)
    wbk = h + l
    # Endpoint of ROM, followed by padded endpoint.
    wbk+=p
    e = (wbk+15) & ~15

    if e>=0x4000000:
        print("Warning! Your ROM exceeds 512Mb.  It will not run on console.")

    # Pad wbk to 0x16, in conformance with the standard (though not 100% necessary).
    b = b'\xb6U#\x950\xec+\x8d\xb6U#\x950\xec+\x8d'
    rom[wbk:e] = b[wbk&15:]
    rom = rom[:e]

    # If pad=True, pad the ROM up to the nearest 0x400000 boundry.
    if pad:
        p = e+0x3FFFFF
        p&= ~0x3FFFFF
        from itertools import repeat
        rom.extend(repeat(255, p-e))
    return rom

--------------------------------------------------------------------------------
def filelist(rom, filename):
    """Opens a utf-8 filelist of formatted entries, inserting them into rom.
    rom may be a bytes/bytearray object or N64 instance.  No rom verification is performed.
    Returns a rom bytearray with corrected checksum or None if an error occurred."""
    if not rom or not filename:
        return None

    try:
        import codecs
        with codecs.open(filename, encoding='utf-8-sig') as f:
            cmds = [i.rstrip() for i in f.readlines()]
    except:
        print("Could not read filelist.")
        return None
    if not isinstance(rom, N64):
        rom = N64(rom)

    try:
        for c, i in enumerate(cmds):
            if not i or i[0]=='#':
                continue

            t, s, n = i.split(maxsplit=2)
            with open(n, 'rb') as f:
                data = f.read()

            # Else, this is a file to be inserted in a slot
            if t=='-patch':
                rom.rom = patch_10.apply(rom.rom)
                rom.rom = patch_crack.apply(rom.rom)

            # Slot 'global' is global text, right now fixed to default settings.
            elif s=='global':
                if t=='-r':
                    print("Unable to insert global text: raw file format not yet supported.")
                    continue
                elif t=='b':
                    # Presume it's a binary dump of the data, which is altogether stupid if you ask me.
                    data = fetchGlobalText(data, 0xE94, 309, 0x80104200)

                rom.rom = insertGlobalText(data, rom.rom)

            else:
                v = int(s, base=0)
                idx = fileidx.index(v)
                print("{:d}\tInserting {} in slot {:d} (0x{:X}).".format(c,n,idx,v))

                if t == '-t':
                    print("\tconverting text to binary...")
                    data = CSVtoVPW2(data)

                if t == '-p':
                    print("\tconverting png to TEX...")
                    data = TEXfile.frompng(data).write()

                fr = True if t=='-r' else False
                rom.rom = offset(rom.rom, idx, data, fr)

    except ValueError:
        print("Formatting error in line {:d}: {}".format(c, i))
    except IndexError:
        print("Line {:d}: slot 0x{:X} is not recognized.".format(c, s))
    except OSError as E:
        print("Line {:d}: {}.".format(c, E))
    except Exception as E:
        print("Line {:d}: {}".format(c, E))
    else:
        # If all went well, save it back and recalc the checksum.
        print("Fixing checksum.")
        rom.calccrc(fix=True)
        print("Done.")
        return rom.rom
